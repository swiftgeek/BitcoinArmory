################################################################################
#                                                                              #
#  Copyright (C) 2011, Alan C. Reiner    <alan.reiner@gmail.com>               #
#  Distributed under the GNU Affero General Public License (AGPL v3)           #
#  See LICENSE or http://www.gnu.org/licenses/agpl.html                        #
#                                                                              #
################################################################################

********************************************************************************
*
* Project:    Armory
* Author:     Alan Reiner
* Orig Date:  20 November, 2011
* Descr:      This file serves as an engine for python-based Bitcoin software.
*             I forked this from my own project -- PyBtcEngine -- because I
*             I needed to start including/rewriting code to use CppBlockUtils
*             but did not want to break the pure-python methods in PyBtcEngine. 
*             If you are interested in in a pure-python set of bitcoin utils
*             please go checkout the PyBtcEngine github project.  
*
*             The biggest advatage of using SWIG is that you have access to
*             the blockchain through BlockObj/BlockObjRef/BlockUtils, as found
*             in the CppForSWIG directory.  This is available in PyBtcEngine,
*             but I had to split out the modules, and I didn't have a good way
*             to maintain the pure-python module while also implementing all
*             the great SWIG-imported C++ utilities I built.
*
*             ***NOTE***  This is still the Full-RAM implementation, which
*                         requires holding the *entire* blockchain in memory.
*                         This is not a problem for newer computers, which 
*                         usually have 4GB to 16GB of RAM, and this only uses
*                         1.1 GB to hold the blockchain.
*                    
*                         In the future, I plan to try to make this more
*                         lightweight, but I am going to forego that yet
*                         in favor of making a utility that works for some
*                         users (there's a lot of top-level reorg that needs
*                         to be done to not store the entire blockchain).
*             
*             This module replaces the ECDSA operations, with faster ones
*             implemented in C++ from Crypto++.  This also enables the ability
*             to use SecureBinaryData objects for moving around private keys,
*             though I'm not entirely clear if python-based memory management
*             is going to properly clean up after itself, even with a page-
*             locked, destructable data container.
*
********************************************************************************
*
* Please take a moment to donate 1.0 BTC!    1Gffm7LKXcNFPrtxy6yF4JBoe5rVka4sn1
*
********************************************************************************

********************************************************************************
*  STATUS:   Last Updated - 08 Dec, 2011
*            Legend:   
*                      _    not implemented
*                      .    implemented but not tested
*                      +    implemented and partially tested
*                      X    implemented and tested
*  
   *                                        
*     ---------------------------------------------------------------
*      (01)  Ser/Unser Block Objects              X
*      (02)  Hash160/Hash256                      X
*      (03)  Difficulty calcs                     X
*      (04)  Address Generation                   X
*      (05)  Address Verify/Manip                 X
*     ---------------------------------------------------------------
*      (06)  BlkHeaders read/scan/org             X
*      (07)  BlkHeaders reorgs                    X
*      (08)  Blockchain read/scan/org             X
*      (09)  Blockchain reorgs                    X
*      (10)  Blockchain verify integrity          X
*     ---------------------------------------------------------------
*      (11)  NonStd Tx Detection                  +
*      (12)  Arbitrary script parsing             X
*      (13)  OP_CHECKSIG/CHECKMULTISIG            X
*      (14*) Arbitrary script eval                X
*      (15)  ECDSA Sign/Verify                    X
*     ---------------------------------------------------------------
*      (16)  Address/Wallet tracking              X
*      (17)  Scan blkchain for Tx                 X
*      (18)  Scan blkchain for NonStd             X
*      (19)  Reorg w/ double-spend                X
*      (20)  Add new blockdata real-time          X
*     ---------------------------------------------------------------
*      (21)  SecureBinaryData                     X
*      (22)  Crypto++ ECDSA Hooked                X
*      (23)  Crypto++ AES Hooked                  X
*      (24)  Crypto++ RandNumGen Hooked           X
*      (25)  Key-derivation (time&mem bound)      X
*     ---------------------------------------------------------------
*      (26)  Address Encrypt (AES)                X
*      (27)  Address Encrypt (Change Passwd)      X
*      (28)  Deterministic Addr Gen (ECDSAPriv)   X
*      (29)  Deterministic Addr Gen (ECDSAPub)    X
*      (30)  Deterministic Addr Gen (Random)     
*     ---------------------------------------------------------------
*      (31)  PyWallet/Addr File I/O               X
*      (32)  SelectCoins for tx                   X
*      (33)  Tx fee calculations                  X
*      (34)  Tx construct given inputs            X
*      (35)  Distribution Proposals (std)         X
*      (36*) Distribution Proposals (multi-sig)   .
*     ---------------------------------------------------------------
*      (37)  Connect to localhost bitcoind        X
*      (38)  Connect to nodes (bootstrap IRC)
*      (39)  Blockchain download
*      (40)  Get tx data not in block yet         X
*      (41)  Tx broadcast                         X
*
*
* Notes:
*     (09)  I have THOROUGHLY tested the blockchain reorg code.  and making 
*           sure everything looks exactly right at each step.  After a reorg,
*           invalidated Tx's show up in the address ledger with a flag
*           that identifies it has been removed.  This is really important in
*           the event of oddities in the blockchain -- normally the transaction
*           would just disappear without evidence it ever existed, which can 
*           cause a lot of user confusion.
*           
*     (11)  Is "mostly" tested because there are a few TxIn scripts that I fail
*           to identify as "standard."  This is because it appears that a few 
*           TxIns (less than 50 of 1,500,000) have a couple extra bytes in the 
*           DER signature that throws me off.  I'm not sure whether I need to
*           turn around and reimplement the signauture reading based on a real
*           DER library, or just hack it to accept extra 0x00 bytes at the end.
*
*     (14*) I have tested a variety of very complicated scripts, mostly from
*           the testnet, including OP_CHECKSIG and OP_CHECKMULTISIG.  Both the
*           C++ and python code can parse all these scripts, and the python 
*           code can execute these scripts successfully.  HOWEVER, I have 
*           NOT implemented the OP_IF/OP_NOTIF/OP_ELSE/OP_ENDIF op-codes. 
*           These codes require a bit of work to get right, and not currently
*           part of any near-term isStandard() transaction types.  
*
*     (36*) In anticipation of supporting multi-signature transactions, I have
*           created a specification for handling multi-sig transactions, which
*           also happens to work well for offline wallets/transactions.  I 
*           have called these "Distribution Proposals".  See the following BIP:
*              https://gist.github.com/1321518
*
*
* More Notes:
*      FullRAM implementation only in C++ code.  However,
*      modern computers can handle the full blockchain in RAM right now, and 
*      probably for the next year, so there's no hurry to restructure the code
*      to index the blockchain into memory and scan it in batches
*
*      To be clear:  I WILL DO THIS, just not yet -- one of my first priorities
*                    after an initial client release
*
*      Short/Medium-term future:
*            Convert wallet files to/from official BTC wallets (pywallet)
*  
********************************************************************************

********************************************************************************

   For information on dependencies and compiling, see Using_PyBtcEngine.README

********************************************************************************
#####
08 Dec, 2011

   *** Fixed major blockchain-wallet scan bottleneck! ***

   Added a bulk filter to the wallet-tx scanning of the blockchain, to quickly
   identify the 99.99%+ tx that are not ours, I got run time down to less than 
   1 second per wallet!  And this run time should be O(log(N)) in the number 
   of addr in the wallet.  So it may be to 2 or 3 seconds for massive wallets,
   but it's much better than 5-15s it was before for only a few addresses (and
   was O(N) before). 


#####
05 Dec, 2011

   ***
   *** All crypto, addresses, deterministic wallets, TxDPs, networking!
   ***

   TONS OF NEW FEATURES, AND ALL OF IT HAS BEEN UNIT TESTED!

   -- PyBtcAddress:  Complete address management, with in-place priv key 
                     encryption, time- and memory-bound KDF, and address
                     chaining even when locked.  By "address chaining", 
                     we mean deterministic addresses via a chain code,
                     applying Diffie-Hellman shared-secret logic with the
                     32-byte chaincode as one "private key".  This produces
                     secure deterministic wallets, and new public keys can
                     be computed *without private keys*.  This makes it 
                     possible to have online/watching-only wallets!
                     
   -- PyBtcWallet:   Complete, atomic-file-operation, error-correcting 
                     wallet system!  Uses manual binary file format 
                     (not susceptible to the 0.4.0 encryption bug), and
                     uses a backup to do COMPLETELY ATOMIC file operations,
                     guaranteeing that all wallet updates either complete
                     without corruption, or that we have an uncorrupted
                     file from which we can restore an interrupted op.
         
                     Easy private key import for physical bitcoins, or 
                     offline storage of private keys, only to be spent
                     when the user types/copies in the private key.
                     
                     Thoroughly tested all the encryption options (AES256)
                     with encryption/passphrase changing, KDF parameter
                     changing, wallet serialize/unserialize, single-byte
                     error correction, adjustable lock/unlock frequency,
                     and ONLINE-WALLET-FORK:  rewrites the wallet without
                     any private key data, but can be used from an online
                     to monitor transactions, and generate new addresses.

   -- TxDPs:         Based on BIP 0010: 
                        https://github.com/genjix/bips/blob/master/bip-0010.md
                     All transaction operations in Armory go through
                     "Tx Distribution Proposals", which is an ASCII-able 
                     serialization for unsigned transactions, which can be
                     easily transmitted through email, and used to collect 
                     signatures.  THIS IS ALSO A MECHANISM FOR THE EASIEST
                     OFFLINE-WALLET capability, ever.  If you are using an
                     online wallet, you "Send Coins" in the same way you 
                     would if you had the private keys, but instead it puts
                     a txdp file on a USB key, which can then be taken to
                     the offline computer for signing:  THE OFFLINE COMPUTER
                     DOES NOT NEED THE BLOCKCHAIN IN ORDER TO REVIEW AND
                     SIGN THE TXDP.  Sign it and take back to your online 
                     computer for broadcast.
         

   -- Multi-sig tx:  The TxDP concept is integrated so tightly into this 
                     codebase, because it will be A CORE ELEMENT OF MULTI-
                     SIGNATURE TRANSACTIONS!

                     This exactly same technique will be used for multi-sigs,
                     in fact, the offline-wallet signing is just a special
                     case of a 1-of-1 multi-sig tx, solved by TxDPs.  
                     Multi-sig support is integrated into the TxDPs/wallets, 
                     but it has not been tested yet.  This will be tested 
                     as soon as my testnet coins receive enough confirmations.

   -- NETWORKING:    Using python-twisted and all the bitcoin network messages 
                     I will need for getting transactions not in the blockchain 
                     yet, and broadcasting pre-generated transactions.  
                  
                     NOTE: right now it only connects to localhost, requiring
                     bitcoin/bitcoind to be running.  With the robustness of 
                     the networking code, it should be fairly easy to implement
                     "normal" multiple-connection node behavior... I just need
                     to add/test the capability to collect blocks, update the
                     blockchain, and maintain peer/address lists with a variety
                     of connections.  This is one of my main priorities after 
                     the first client release!
                    
   -- qt4reactor.py: Found a robust version of the qt4reactor, which is a
                     combined, asynchronous event loop for both, Twisted, and
                     PyQt4.  With this file, I can integrate my existing 
                     networking code with PyQt UIs
                     
   -- Double Broadcast Detection:
   
                     With access to all messages moving through the network,
                     it is easy to see whether multiple zero-confirmation txs
                     are spending the same outputs.  This could be indicative
                     of a double-broadcast attack, where someone sends you a 
                     tx first, then broadcasts a competing one to the other 
                     half of the network.  This will show up as a zero-conf tx
                     in the user's client, and might even get 1 confirmation,
                     before it disappears.  The attack won't succeed very
                     often, but it's basically free for the attacker to execute
                     it ... unless you have double-broadcast detection!

                     A master list of TxOuts waiting to enter the blockchain
                     is maintained in the ArmoryClientFactory, and a
                     flag is raised if a tx is received which tries to spend
                     any outputs already in the queue.  The client will usually
                     just drop the tx because it conflicts with another one in
                     the memory pool, but there's no reason we can't examine it
                     for double-broadcast attacks.  An "alert" flag will be 
                     raised in the client for two-hours, and the outer app
                     can check the factory.doubleBroadcastAlerts for their 
                     wallet addresses to find out if they are at risk.  
                     A warning can be raised to say "MAKE SURE YOU WAIT FOR
                     6 CONFIRMATIONS BEFORE ACCEPTING THIS TX.  ESPECIALLY
                     IMPORTANT FOR THIS TX!!!"
                     
                     
                     

#####
20 Nov, 2011

   *** Implemented ECDSA in C++, AES encryption, KDF, SecureBinaryData

#####
28 Oct, 2011

   *** Implemented SelectCoins and started "Tx Distribution Proposals."  

   Actually spent a bit of time writing the following specification instead
   of coding:
               https://gist.github.com/1321518

   I figured that ironing out a good way to implement it before I actually do,
   would be a good investment of time.

   Fantastically, this method of dealing with multi-signature transactions, 
   also works surprisingly well for offline transactions:  you can use the 
   exact same mechanism, as a 1-of-1 tx that needs to be signed.  The way 
   the TxDP works, this can be done by an offline computer without access to
   the blockchain, and thus only needs the ECDSA private keys.

   The only problem is, this complicates my TxDP code, because most TxDPs will
   only involve signing a single TxIn, whereas this is a "regular" transaction
   which will potentially have multiple TxIns.  It's going to get done, but it
   is extra complexity...


18 Oct, 2011

   *** Working blockchain reorgs with double-spend detection, GUI works in 10.04

   I added a createTestChain.py script that can be modified to create any kind
   of difficulty-1 blockchain, starting with the actual genesis block.  I have
   used it to create a reorg-double-spend test, and crushed some pretty heavy 
   bugs in that code.  Next I will be working on the Tx/Ledger handling, so
   that any transactions that were, at any point, marked valid, will remain in
   the DB/memorypool for some amount of time, to let the user know what 
   happened.

   Along the way, also had to iron out my tx-construction code in python.  It's
   a complete pain in the ass (endianness is a bitch), but it's finally done
   now and the python code can construct Txs from a list of Addr-Txout-pairs
   and a list of recipient-value-pairs.  (I do not have TxOut selection 
   implemented, but it should be straightforward compared to the ECDSA and
   OP_CHECKSIG stuff).

#####
06 Oct, 2011

   *** A working block-explorer demo in PyQt4!  (Linux/Ubuntu, only, right now)

   Got enough of the interface working in SWIG to be able to create a full 
   blockchain explorer.  It does not include anything to do with addresses,
   besides identifying the addresses involved in the particular block you
   are browsing.  In the immediate future I plan to include a separate
   tab/view for doing address searches and display.

   I had implemented a feature to auto-update the GUI in realtime if you
   are simultaneously running the BTC client and it updates blk0001.dat. 
   Unfortunately, there's a bug in the addBlockData() method which causes
   a segfault.  This feature will be back soon, but I think I need the help
   of MSVS to thoroughly test/debug addBlockData().

#####
25 Sep, 2011:   

   *** Address scanning, Tx ledgers, wallet balance, etc, ADDED
   
   The directory cppForSwig contains a C++ implementation of the block objects
   with everything that doesn't require a bignum library.  The goal was to 
   create C++ code that could be accessed via SWIG/python to do the heavy 
   lifting, since python isn't very good at doing it quickly/efficiently.
   
   At the moment, the BlockDataManager_FullRAM will store the entire blockchain
   in RAM, and do all calculations on it there.  I anticipate in the future, to
   convert this to a file-based approach with an initial scan.

   Below is a list of the operations the C++ code supports, as well as timings
   based on my decent AMD Phenom II X4 840 CPU and WD 1TB HDD, using a file
   containing the blockchain up to about block 145,000:  600 MB.

      -- Reading blockchain from disk:    5.4s
      -- Populating header and tx maps:  10.2s
      -- Organizing headers into chain:   0.6s
      -- Scan blockchain or wallet-txs:   2.7s

   Note that these operations are all from scratch, meaning you don't need to
   keep any other files on your HDD except for your address list, and the 
   client could start up, read the entire blkchain file, and find all of your
   transactions and compute your balances from scratch, in under 30s.  I'm 
   very pleased with these results!  (NOTE:  This does not involve any kind
   of verification, or crypto operations).

   Some additional features:
      -- Will maintain a tx ledger for each address individually, as well
         as for the entire wallet as a whole (this should aggregate multiple
         TxIn objects in a single Tx into a single ledger entry, though I
         haven't tested this specific feature yet).  
      -- The ledgers can be sorted by order in the blockchain
      -- A separate list of your TxOut-TxIn pairs provides a simple way
         to access your unspent TxOuts, and prune off TxOuts that have 
         already been spent
      -- The organize-blockchain should detect reorganizations and invalid
         blocks, but does not yet do anything other than return a flag
         I will eventually go through and populate the previouslyValid list.
      -- The basics of the SWIG interface are in place:  I've made sure that
         std::strings and std::vectors are handled properly and that the 
         blockchain reading works from python.  But that was a few commits
         ago and the interface needs to be updated. 
   

#####
20 Aug, 2011:
   
   PyBtcEngine is a finally a fairly complete set of tools that addresses most
   of the calculations, manipulations and crypto that is involved in analyzing
   the blockchain.  It's not particularly fast, which is why I started creating
   a C++ backend to handle all the block data, to be imported via SWIG.  This
   is not yet complete, but believe will be the most efficient method possible
   to process the entire blockchain at once.


   Due to many requests on the forum, as well as personal desire to identify 
   large chunks of binary/hex data, I have created a separate script called
   mysteryHex.py which will try to completely break down a chunk of data and
   find BTC-related strings in it, using PyBtcEngine.  It should be a fairly
   versatile tool, allowing for quick ID of headers, transactions, public keys,
   etc.  Also allows the user to read their blockfile store to construct a 
   dictionary of 1-2 million hashes to include in the block file identification
   (use -s to enable hash searching from knownHashes.bin, and -u to create or
   update your knownHashes.bin file from blk0001.dat in your BTC directory).
   
   In fact, here's the output of ./mysteryHex.py --help:

      Try to identify Bitcoin-related strings in a block of data
      Usage: mysteryHex.py [--binary|-b] -f FILE 
         or: mysteryHex.py unidentifiedHex

      Options:
        -h, --help            show this help message and exit
        -f FILENAME, --file=FILENAME
                              Get unidentified data from this file
        -k BLK0001FILE, --blkfile=BLK0001FILE
                              Update hashlist from this file (default
                              ~/.bitcoin/blk0001.dat)
        -g HASHFILE, --hashfile=HASHFILE
                              The file to store and retrieve header/tx hashes
        -b, --binary          Specified file is in binary
        -s, --usehashes       Import header/tx hashes to be used in searching
        -u, --updatehashes    Search blk0001.dat to update hashlist
        -r, --rescanhashes    Rescan blkfile for header/tx hashes
 


#####
16 July, 2011:

   After a ton of work, I have finally completed much of the calculation engine!
   All number/binary conversions work, with easy endianness swapping.
   Complete, recursive serialization and unserialization of all block/tx data
   MerkleTree calculation and verification done
   Cryptography library from "Lis" wrapped and tested on arbitrary data
   Most script OP_CODEs implemented, and OP_CHECKSIG works on example tx data!

   Basically, everything else that I need to do (besides networking), should 
   be very easy to implement.  With all the endianness, serialization and 
   crypto methods tested, packet construction, block verification, data
   structures, and crypto anything should be a breeze.

   Of course, this does not include networking.  The networking engine is going
   to be a whole different beast... but luckily Sam's code already has a lot of 
   that written.  When it comes to networking, I might just stick to using other
   people's code, instead of re-writing it in my own way.

   Some immeidate things that I need to do:
      SIGHASH_ALL/NONE/SINGLE/ANYONCANPAY
      Wallet/Account file formats and implementation

   Long term:
      Networking engine (ugh)



